#labels Featured
= 介绍 =

本软件是在2010年多媒体技术基础课的课程项目中，由张璞独立开发完成的。由于在软件界面和功能实现上参考了winrar压缩软件，同时张璞的英文缩写是ZP，所以本软件的名字被定为 ZPRAR。
本软件是用Visual Studio Team System 2008开发的，使用的语言是C#。如果想使用本软件需要在电脑上安装.net framwork3.5及以上版本。如果您的电脑已经完整安装过visual studio2008及以上版本，则可以直接运行本程序。
文件中附带的setup.exe可以全程指导您安装本程序。

张璞，计算机科学技术学院计算机科学与技术专业08级本科生。


= 算法总体介绍 =

本程序主要实现了Huffman压缩算法、解压算法和LZSS压缩算法、解压算法。

在Huffman算法和LZSS算法中，我在压缩的开始都先把待压缩的文件的文件名按照文件名长度+文件名的格式写入的压缩的目标文件的文件头中，这样在解压的时候可以先读入文件名的长度，然后读取对应长度的文件名作为解压的目标文件的文件名（或者只提供扩展名）。

由于此两种压缩算法都是以字符为单位做压缩的，所以不光对文文本文件，对于任何类型的文件都可以进行压缩和解压缩操作。

= Huffman压缩算法 =

Huffman压缩算法执行之前，首先需要对待压缩的文档的数据做一个统计。统计过程结束可以得到一个统计表。，这个表中记录了各个字符的出现次数。这个表有两个用处，首先可以在解压的时候辅助建立Huffman树，其次，还可以将这个统计表写入压缩文件的文件头，这样在解压的时候，通过读取文件头的这些信息，就可以得到对应的统计表，这个统计表也可以在解压的时候辅助建立Huffman树，保证压缩和解压操作的Huffman树是相同的，以此保证压缩和解压是互逆的。

在向目标文件写统计表的时候，采用了“行程计数”的方式，也就是说，将相邻的一串字母作为一个行程，将行程的起始和结束的字符写入文件，然后再将对应的每个字符的出现次数写入文件。如此，把所有的统计表都写入目标文件。
由于每次压缩操作都要事先对待压缩的文件做一次统计操作，这样会增加压缩的时间，采用自适应建立Huffman树的方式可以节省这部分时间。不过由于统计得到的概率是最准确的，所以由此得到的压缩码字中的冗余信息也是最少的。本程序中采用事先进行一次统计的这方式。

在Huffman压缩和解压算法中，要借助Huffman树的结构，我在本程序中建立的Huffman树是一棵以结构数组作为存储形式的二叉树。Huffman树的建立过程需要不断地从所有节点中找到最小的两个节点，为了较快的实现这一要求，我在程序中使用了最小堆的数据结构，可以在O(log n)的时间内得到最终的结果。

Huffman编码过程需要通过在这个树的结构中寻找对应的字符，然后把从根节点到叶节点之间的路径记录下来，作为码字。我在本程序中使用递归算法，较好的实现了这一要求。否则，得到路径之后要进行一次逆转才能得到最终的码字，递归方式可以避免这次逆转。

Huffman的编码的主过程需要不断地把读入的字符转化成相应的码字，如果每个字符都进行一次搜索，然后才把搜索的结果输出的话，会大大降低程序的效率。所以我在程序中使用了一个密码表的结构，统计完文件之后，就建立这么一个密码表，字符的ASCII码值对应密码表的索引值，然后由这个索引值得到对应的表示码字的字符串，正式编码的时候只用直接读取码字就可以了O(1)的时间内，这样可以大大提高效率。
在解码的过程中，由于Huffman算法存在的局限性，即Huffman码是可变长度的，所以无法像编码时的那样使用密码表来辅助解码。解码必须按照读入的码字，沿着建立的Huffman树走。

另外需要注意的，Huffman算法对于文件中只有一个字符，因此建立的Huffman树中只有一个节点的情况无法进行正确处理，比如文件中有且只有3个a，那么在压缩得到的文件中压缩数据什么都没有。而在解压的时候，只能够输出一个a，导致了压缩和解压的不互逆。为了解决这个问题，我压缩程序中，写入文件名长度和文件名之后加入了一个字符，用来指示是否出现了这种情况，如果出现了这种情况，那么就不再进行常规的Huffman压缩操作，而是直接向目标文件中写入对应的字符和对应的出现次数，否则置标志位，然后进行相应的Huffman压缩操作。这样在相应的解压的时候，如果读到目标位指示是特殊情况出现了，那么就直接按照字符、统计次数输出即可，否则进行Huffman解压操作。

= LZSS算法 =

LZSS算法采用活动窗口的字典压缩方法。在这个算法中，需要预先设定一个活动窗口值，将正在处理的字符串与活动窗口中的字符串进行比较，如果有匹配的字串，而且匹配长度大于规定的最小长度，那么就把对应的匹配位置、匹配长度输出，否则就直接输出字符。这个算法的整体思想非常简单，不过在实现上却有很多可以进行优化的地方。

首先，我在LZSS算法中采用的活动窗并非一个真正的活动窗，而是一个数组，在数组运算中都进行取模运算，这样，每次窗口发生移动只要让窗口的首地址相应的增加就可以了，取模后就相当于窗口发生了移动。这样的方法可以避免大量的数组元素的拷贝，大大提高程序的运行效率。

另外，由于LZSS是一种词典编码，后面的编码是以前面活动窗中的字符作为词典进行编码的，所以在编码后面的字符的时候需要在前面的字符中寻找匹配的字串。如果每次都进行一次普通的字符串匹配的算法的话，那么显然效率会很低。我参考了《数据压缩技术原理与范例》中的思想，将词典（也就是前面的活动窗中的字符串）组织成一个二叉树的结构，二叉树的每个节点存放该节点的值，指向上一个节点的索引和指向下一个节点的索引。通过上一个节点的索引可以找到按照字典序的比当前的字串小的字串，按照下一个节点的索引可以找到按照字典序的比当前的字串大的字串。

每次读取新的字符的时候，把新读入的字符放到当前缓冲区的结束位置，并试图把以新的字符为首的最多的未编码字串插入的当前的二叉树中，插入的过程类似于二叉搜索树的插入过程，注意此处的插入仅仅是指指针的插入，而读入的字符则是简单的放到活动窗口的末尾，并把活动窗口最开始的字符删去，程序返回匹配长度。

LZSS的解压过程与压缩过程比起来要简单得多。由于压缩情况有匹配长度过小，直接输出字符和匹配长度足够，输出编码结果两种，所以在解压过程中同样有两种情况，解压程序首先读入一个判断位，判断是前一种情况的话，那么直接输出读入的字符到目标文件，同时将该字符添加到活动窗口。如果是后一种情况，则在活动窗口中定位匹配开始位置，拷贝匹配长度个字符输出到目标文件。

可见，LZSS的解压过程相当于仅仅是字符的拷贝过程，所以无论从程序代码还是实验结果来看，程序的性能都是很好的。

= 混合压缩算法 =

在混合压缩算法中，每次执行相当于进行一次LZSS，然后再进行一次Huffman，或者相反，我在本程序中，通过一个临时文件，将两个算法连接在了一起，待压缩或者解压完成后，把对应的临时文件删除，这样，其实建立在LZSS压缩解压算法和Huffman压缩解压算法之上的混合压缩解压算法就变得非常简单。

= 图形化界面 =

为了使得程序的操作更加简单，也为了能够完整的更好的完成本次课程项目，我在本程序中采用了图形化界面，图形化界面与控制台程序有很多的不同。

一个最主要的问题就是，当程序在压缩或解压大型文件的时候，压缩或解压的进程会阻塞整个系统的进程，由此使得程序的主窗口失去响应。在查找了大量的资料后，我发现了使用多线程的方法可以有效地解决这个问题。每当压缩和解压的命令被选择，就新开一个线程，在新的线程中进行压缩和解压操作，这样程序的主窗口的线程没有被阻塞，可以大大提高软件的使用感受。

当然，使用多线程的同时带来的问题就是，不能够让一个压缩或解压程序还在进行的情况下就执行下一个压缩或解压的操作，否则会大量消耗系统的资源。所以每次压缩或解压的新线程开启之后，主窗口中的压缩或解压按钮就变得不可用，以阻止用户打开一个新的进程。

另外，由于在压缩和解压很大的文件的时候，整个程序进行的时间可能会很长，所以如果能够及时的提示用户程序的运行进度，那么可以大大提高用户的体验。因此，我在本程序中加入了进度条，在MainForm类中添加了设置进度条值的公共方法，在Huffman和LZSS的压缩和解压程序中，都同步支持设置进度条的操作，同时结合程序的多线程特性，一个带有进度条的友好的压缩程序就诞生了。

= 压缩测试 =

== 测试环境 ==

处理器：Intel Core Duo CPU T5750 @2.00GHz 2.00GHz

内存：2.00GB

操作系统：16位Windows7 企业版操作系统

== 与WINRAR进行比较 ==

a．压缩文本文件——Jane Eyre(简·爱).txt（原文件大小1.06MB）

WINRAR测试结果

标准压缩和最好压缩的结果和使用时间相同。

压缩结果：压缩完成文件大小362KB，是原来的34.15%

压缩完成的时间:2秒以下

解压结果：解压后文件可以完整复原。

解压时间：1秒

ZPRAR测试结果

LZSS+Huffman压缩结果：压缩完成文件大小609KB,是原来的57.45%

压缩完成的时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

Huffman+LZSS压缩结果：压缩完成文件大小644KB，是原来的60.75%

压缩完成的时间：3秒

解压结果：解压后文件可以完整复原。

解压时间：4秒

压缩文本文件——C_多线程学习.docx（原文件大小51.2KB）

WINRAR测试结果

标准压缩和最好压缩的结果和使用时间相同。

压缩结果：压缩完成文件大小48.5KB，是原来的94.72%

压缩完成的时间:2秒

解压结果：解压后文件可以完整复原。

解压时间：1秒

ZPRAR测试结果

LZSS+Huffman压缩结果：压缩完成文件大小55.3KB,是原来的108.0%

压缩完成的时间：2秒

解压结果：解压后文件可以完整复原。

解压时间：2秒

Huffman+LZSS压缩结果：压缩完成文件大小55.8KB，是原来的108.98%

压缩完成的时间：2秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

b.压缩图片——Penguins.jpg（原文件大小759KB）

WINRAR测试结果

标准压缩和最好压缩的结果和使用时间相同。

标准压缩结果：压缩完成文件大小758KB，是原来的99.86%。

压缩完成时间：2秒以下

解压结果：解压后文件可以完整复原。

解压时间：2秒

ZPRAR测试结果

LZSS+Huffman压缩结果845KB，是原来的111.48%

压缩完成的时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：8秒

Huffman+LZSS压缩结果848KB，是原来的111.73%

压缩完成的时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：9秒

压缩图片——desktop.bmp（原文件大小2.92MB）

WINRAR测试结果

标准压缩和最好压缩的结果和使用时间相同。

标准压缩结果：压缩完成文件大小165KB，是原来的5.65%。

压缩完成时间：2秒以下

解压结果：解压后文件可以完整复原。

解压时间：2秒

ZPRAR测试结果

LZSS+Huffman压缩结果515KB，是原来的17.64%

压缩完成的时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：4秒

Huffman+LZSS压缩结果418KB，是原来的14.32%

压缩完成的时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：5秒

c.压缩声音文件——03.烟花易冷.mp3（原文件大小10MB）

WINRAR测试结果

标准压缩结果：压缩完成文件大小9.9MB，是原来的99%

压缩完成时间：8秒

最好压缩结果：完成文件大小9.89MB，是原来的98.9%

压缩完成时间：9秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

ZPRAR测试结果

LZSS+Huffman：压缩完成文件大小11.0MB，是原来的110%

压缩完成时间：13秒

解压结果：解压后文件可以完整复原。

解压时间：52秒

Huffman+LZSS: 压缩完成文件大小11.0MB，是原来的110%

压缩完成时间：14秒

解压结果：解压后文件可以完整复原。

解压时间：54秒

压缩声音文件——3.wav（原文件大小312KB）

WINRAR测试结果

最好压缩结果和标准压缩结果相同

标准压缩结果：压缩完成文件大小310KB，是原来的99.36%

压缩完成时间：2秒

解压结果：解压后文件可以完整复原。

解压时间：1秒

ZPRAR测试结果

LZSS+Huffman：压缩完成文件大小347KB，是原来的111.2%

压缩完成时间：2秒

解压结果：解压后文件可以完整复原。

解压时间：2秒

Huffman+LZSS: 压缩完成文件大小347MB，是原来的111.2%

压缩完成时间：3秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

d.视频文件——最后一幕.swf（原文件大小217KB）

WINRAR测试结果

标准压缩和最好压缩的压缩结果和使用时间相同

压缩结果：压缩完成文件大小217KB，是原来的100%

压缩完成时间：2秒以下

解压结果：解压后文件可以完整复原。

解压时间：3秒

ZPRAR测试结果

LZSS+Huffman:压缩完成文件大小243KB，是原来的111.98%

压缩完成时间：1秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

Huffman+LZSS:压缩完成文件大小243KB，是原来的111.98%

压缩完成时间：1秒

解压结果：解压后文件可以完整复原。

解压时间：4秒

e.其他文件——XML Cache.ppt（原文件大小492KB）

WINRAR测试结果

标准压缩和最好压缩所用时间

压缩结果：压缩完成文件大小320KB，是原来的65.04%

压缩完成时间：1秒

ZPRAR测试结果

Huffman+LZSS:压缩完成文件大小393KB，是原来的79.87%

压缩完成时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

LZSS+Huffman：压缩完成文件大小454KB，是原来的92.27%

压缩完成时间：2——3秒

解压结果：解压后文件可以完整复原。

解压时间：3秒

== 测试结论 ==

WINRAR作为商业软件，其平均性能和压缩质量是我的软件所无法相比的。但是从测试结果可以看出，在处理文本文档和bmp文件的时候，我的软件还是能够达到非常好的效果。

而ZPRAR在压缩一些图片，声音和视频格式（如mp3，wav，swf等）的时候，其压缩的速度和质量都会变得很差，但与此做比较的WINRAR的压缩效果也不是很好。我分析主要原因是这些文件已经使用了各自的压缩方法，文件数据中的冗余信息已经非常少了。再次进行压缩的效果自然会很不好。同时，在ZPRAR中，由于还有对压缩得到的目标文件写文件头辅助解压操作，这些文件头会大大抵消压缩节省的存储空间，在某些情况下甚至有可能使得压缩的结果文件比源文件还要大。

从压缩和解压的时间上来看，整体上，ZPRAR还是劣于WINRAR，但是表现已经非常不错，1M一下的文件一般可以保证压缩时间都在2秒左右。解压的时间比起压缩的时间来说要长很多，主要可能还在于解压缩的算法上面还有改进的空间。

另外，WINRAR的健壮性也比ZPRAR高，当压缩被非法篡改的文件的时候，WINRAR可以保证识别到这些错误，及时阻止程序的进行，而ZPRAR有时会出现程序失去响应，容错性较小。

ZPRAR无论从压缩和解压的质量还是速度上都要很大的改进空间。比如使用自适应的Huffman压缩算法会使得压缩的时间大大减小。这些是我的下一步工作中要做的。